
running 1 test
File {
    shebang: None,
    attrs: [],
    items: [
        Item::Fn {
            attrs: [],
            vis: Visibility::Public(
                Pub,
            ),
            sig: Signature {
                constness: None,
                asyncness: None,
                unsafety: None,
                abi: None,
                fn_token: Fn,
                ident: Ident {
                    sym: add,
                    span: bytes(9..12),
                },
                generics: Generics {
                    lt_token: None,
                    params: [],
                    gt_token: None,
                    where_clause: None,
                },
                paren_token: Paren,
                inputs: [
                    FnArg::Typed(
                        PatType {
                            attrs: [],
                            pat: Pat::Ident {
                                attrs: [],
                                by_ref: None,
                                mutability: None,
                                ident: Ident {
                                    sym: left,
                                    span: bytes(13..17),
                                },
                                subpat: None,
                            },
                            colon_token: Colon,
                            ty: Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: usize,
                                                span: bytes(19..24),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        },
                    ),
                    Comma,
                    FnArg::Typed(
                        PatType {
                            attrs: [],
                            pat: Pat::Ident {
                                attrs: [],
                                by_ref: None,
                                mutability: None,
                                ident: Ident {
                                    sym: right,
                                    span: bytes(26..31),
                                },
                                subpat: None,
                            },
                            colon_token: Colon,
                            ty: Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: usize,
                                                span: bytes(33..38),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        },
                    ),
                ],
                variadic: None,
                output: ReturnType::Type(
                    RArrow,
                    Type::Path {
                        qself: None,
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident {
                                        sym: usize,
                                        span: bytes(43..48),
                                    },
                                    arguments: PathArguments::None,
                                },
                            ],
                        },
                    },
                ),
            },
            block: Block {
                brace_token: Brace,
                stmts: [
                    Stmt::Expr(
                        Expr::Binary {
                            attrs: [],
                            left: Expr::Path {
                                attrs: [],
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: left,
                                                span: bytes(55..59),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                            op: BinOp::Add(
                                Plus,
                            ),
                            right: Expr::Path {
                                attrs: [],
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: right,
                                                span: bytes(62..67),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        },
                        None,
                    ),
                ],
            },
        },
    ],
}
test tests::add_num ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

