
running 1 test
test tests::output_ast ... ok

successes:

---- tests::output_ast stdout ----
File {
    shebang: None,
    attrs: [],
    items: [
        Item::Fn {
            attrs: [],
            vis: Visibility::Public(
                Pub,
            ),
            sig: Signature {
                constness: None,
                asyncness: None,
                unsafety: None,
                abi: None,
                fn_token: Fn,
                ident: Ident {
                    sym: add,
                    span: bytes(17..20),
                },
                generics: Generics {
                    lt_token: None,
                    params: [],
                    gt_token: None,
                    where_clause: None,
                },
                paren_token: Paren,
                inputs: [
                    FnArg::Typed(
                        PatType {
                            attrs: [],
                            pat: Pat::Ident {
                                attrs: [],
                                by_ref: None,
                                mutability: None,
                                ident: Ident {
                                    sym: left,
                                    span: bytes(21..25),
                                },
                                subpat: None,
                            },
                            colon_token: Colon,
                            ty: Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: usize,
                                                span: bytes(27..32),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        },
                    ),
                    Comma,
                    FnArg::Typed(
                        PatType {
                            attrs: [],
                            pat: Pat::Ident {
                                attrs: [],
                                by_ref: None,
                                mutability: None,
                                ident: Ident {
                                    sym: right,
                                    span: bytes(34..39),
                                },
                                subpat: None,
                            },
                            colon_token: Colon,
                            ty: Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: usize,
                                                span: bytes(41..46),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        },
                    ),
                ],
                variadic: None,
                output: ReturnType::Type(
                    RArrow,
                    Type::Path {
                        qself: None,
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident {
                                        sym: usize,
                                        span: bytes(51..56),
                                    },
                                    arguments: PathArguments::None,
                                },
                            ],
                        },
                    },
                ),
            },
            block: Block {
                brace_token: Brace,
                stmts: [
                    Stmt::Local {
                        attrs: [],
                        let_token: Let,
                        pat: Pat::Ident {
                            attrs: [],
                            by_ref: None,
                            mutability: None,
                            ident: Ident {
                                sym: num,
                                span: bytes(75..78),
                            },
                            subpat: None,
                        },
                        init: Some(
                            LocalInit {
                                eq_token: Eq,
                                expr: Expr::Binary {
                                    attrs: [],
                                    left: Expr::Path {
                                        attrs: [],
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: left,
                                                        span: bytes(81..85),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                    op: BinOp::Add(
                                        Plus,
                                    ),
                                    right: Expr::Path {
                                        attrs: [],
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: right,
                                                        span: bytes(88..93),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                },
                                diverge: None,
                            },
                        ),
                        semi_token: Semi,
                    },
                    Stmt::Expr(
                        Expr::Path {
                            attrs: [],
                            qself: None,
                            path: Path {
                                leading_colon: None,
                                segments: [
                                    PathSegment {
                                        ident: Ident {
                                            sym: num,
                                            span: bytes(107..110),
                                        },
                                        arguments: PathArguments::None,
                                    },
                                ],
                            },
                        },
                        None,
                    ),
                ],
            },
        },
    ],
}


successes:
    tests::output_ast

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out; finished in 0.00s

